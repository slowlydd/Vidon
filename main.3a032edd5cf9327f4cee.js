!function(e){var t={};function i(s){if(t[s])return t[s].exports;var o=t[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(s,o,function(t){return e[t]}.bind(null,o));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(e,t,i){},function(e,t,i){"use strict";i.r(t);let s=0;let o=null;class r{constructor(){this.id=s++,this.observers=[]}addObserver(e){this.observers.push(e)}removeObserver(e){var t=this.observers.indexOf(e);t>-1&&this.observers.splice(t,1)}notify(){this.observers.forEach(e=>{e.update()})}}class n{constructor(e,t,i){this.subjects={},this.vm=e,this.key=t,this.cb=i,this.value=this.getValue()}update(){let e=this.value,t=this.getValue();t!==e&&(this.value=t,this.cb.bind(this.vm)(t,e))}subscribeTo(e){this.subjects[e.id]||(e.addObserver(this),this.subjects[e.id]=e)}getValue(){o=this;let e=this.vm.$data[this.key];return o=null,e}}class a{compile(){this.traverse(this.node)}traverse(e){1===e.nodeType?(this.compileNode(e),e.childNodes.forEach(e=>{this.traverse(e)})):3===e.nodeType&&this.compileText(e)}compileNode(e){let t=[...e.attributes];console.log("TCL: Compile -> compileNode -> attrs",t),t.forEach(t=>{if(this.isModelDirective(t.name)){let i=t.value;e.value=this.vm.$data[i],new n(this.vm,i,(function(t){e.value=t})),e.oninput=e=>{this.vm.$data[i]=e.target.value}}else if(this.isEventDirective(t.name)){let i=t.name.substr(1),s=t.value;e.addEventListener(i,this.vm.$methods[s])}})}isEventDirective(e){return 0===e.indexOf("@")}isModelDirective(e){return"v-model"===e}compileText(e){console.log("TCL: Compile -> compileText -> node",e);let t,i=/{{(.+?)}}/g;for(;t=i.exec(e.nodeValue);){let i=t[0],s=t[1].trim();e.nodeValue=e.nodeValue.replace(i,this.vm.$data[s]),new n(this.vm,s,(function(t,i){e.nodeValue=e.nodeValue.replace(i,t)}))}}constructor(e){this.vm=e,this.node=e.$el,this.compile()}}i(0);let l=new class{constructor(e){this.init(e),function e(t){if(t&&"object"==typeof t)for(var i in t){let s=t[i],n=new r;Object.defineProperty(t,i,{enumerable:!0,configurable:!0,get:function(){return o&&o.subscribeTo(n),s},set:function(e){s=e,n.notify()}}),"object"==typeof s&&e(s)}}(this.$data),new a(this)}init(e){this.$el=document.querySelector(e.el),this.$data=e.data,this.$methods=e.methods;for(const e in this.$data)this.$data.hasOwnProperty(e)&&Object.defineProperty(this,e,{enumerable:!0,configurable:!0,get:()=>this.$data[e],set:t=>{this.$data[e]=t}});for(const e in this.$methods)this.$methods.hasOwnProperty(e)&&(Object.defineProperty(this,e,{enumerable:!0,configurable:!0,get:()=>this.$methods[e],set:t=>{this.$methods[e]=t}}),this.$methods[e]=this.$methods[e].bind(this))}}({el:"#app",data:{name:"Â∞èÈ©¨üê¥",age:12,gender:"Áî∑"},methods:{sayHi(){alert(`‰Ω†Â•Ω, ${this.name}`)},auto(){alert("ÊàëËá™Â∑±ÊâßË°åÁöÑ")}}});setTimeout(()=>{l.age=20,l.auto(),setTimeout(()=>{l.auto=()=>{alert("2ÁßíÂêéÊàëÂèàÂºπÂá∫Êù•‰∫Ü")},l.auto()},2e3)},3e3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,